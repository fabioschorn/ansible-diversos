---
- name: "Validate conditions and ensure sudo configuration"
  hosts: all
  become: yes
  become_method: sudo
  gather_facts: true
  vars:
    # An example IPA user or group to test existence in getent
    ipa_test_user: "some_ipa_user"
    # Number of days to check logins. Adjust as needed.
    login_days: 90

    # NEW: List of service accounts to restrict
    service_accounts:
      - some_service_user
      - another_service_user

  tasks:
    ################################################################
    # 1) Check condition: "IPA client is configured"
    ################################################################

    - name: "Check if sssd is installed"
      package:
        name: sssd
        state: present
      register: sssd_pkg_check
      check_mode: false
      changed_when: false

    - name: "Check if sssd service is running and enabled"
      service:
        name: sssd
        state: started
        enabled: true
      register: sssd_service_check
      check_mode: false
      changed_when: false

    - name: "Check if we can find an IPA user (to confirm IPA is accessible)"
      command: "getent passwd {{ ipa_test_user }}"
      register: ipa_user_check
      ignore_errors: true
      changed_when: false

    ################################################################
    # 2) Check condition: "Users logging in via SSH keys" 
    #    + "Check logins in the last 90 days"
    ################################################################

    - name: "Identify whether there are user authorized_keys files with SSH keys"
      shell: "grep -Er 'ssh-(rsa|ecdsa|ed25519)' /home/*/.ssh/authorized_keys 2>/dev/null || true"
      register: ssh_key_search
      changed_when: false

    - name: Check if there are logins in the last {{ login_days }} days
      shell: "lastlog -t {{ login_days }} | grep -v 'Never' | grep -v 'Username' | awk '{print $1}' | sort -u"
      register: recent_logins
      changed_when: false

    ################################################################
    # 3) Set condition booleans based on results
    ################################################################
    - name: "Determine if IPA is configurated"
      set_fact:
        ipa_configured: >-
          {{
            sssd_pkg_check is not failed and
            sssd_service_check is not failed and
            (ipa_user_check.rc == 0)
          }}
      changed_when: false

    - name: "Determine if SSH keys exist and there were logins in last {{ login_days }} days"
      set_fact:
        ssh_keys_used_recently: >-
          {{
            (ssh_key_search.stdout_lines | length) > 0 and
            (recent_logins.stdout_lines | length) > 0
          }}
      changed_when: false

    ################################################################
    # 4) Debug the conditions
    ################################################################
    - name: Show condition results
      debug:
        msg:
          - "ipa_configured = {{ ipa_configured }}"
          - "ssh_keys_used_recently = {{ ssh_keys_used_recently }}"

    ################################################################
    # 5) If BOTH conditions are met, configure the system
    ################################################################
    - name: "Configure the system (Sudo requirements) if conditions are met"
      block:

        - name: "Gather the package facts"
          package_facts:
            manager: auto
          tags:
            - always

        - name: XCCDF Value var_sudo_logfile # promote to variable
          set_fact:
            var_sudo_logfile: !!str /var/log/sudo.log
            var_sudo_timestamp_timeout: !!str 5
          tags:
            - always

        - name: Ensure logfile is enabled with the appropriate value in /etc/sudoers
          lineinfile:
            path: /etc/sudoers
            regexp: '^[\s]*Defaults\s(.*)\blogfile=[-]?.+\b(.*)$'
            line: 'Defaults \1logfile={{ var_sudo_logfile }}\2'
            validate: '/usr/sbin/visudo -cf %s'
            backrefs: true
          register: edit_sudoers_logfile_option
          tags:
            - CCE-83601-5
            - PCI-DSS-Req-10.2.5
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - low_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_custom_logfile

        - name: Enable logfile option with appropriate value in /etc/sudoers
          lineinfile:
            path: /etc/sudoers
            line: 'Defaults logfile={{ var_sudo_logfile }}'
            validate: '/usr/sbin/visudo -cf %s'
          tags:
            - CCE-83601-5
            - PCI-DSS-Req-10.2.5
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - low_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_custom_logfile

        - name: Ensure use_pty is enabled in /etc/sudoers
          lineinfile:
            path: /etc/sudoers
            regexp: ^[\s]*Defaults.*\buse_pty\b.*$
            line: Defaults use_pty
            validate: /usr/sbin/visudo -cf %s
          tags:
            - CCE-83798-9
            - PCI-DSS-Req-10.2.5
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - medium_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_add_use_pty

        - name: Find /etc/sudoers.d/ files
          ansible.builtin.find:
            paths:
              - /etc/sudoers.d/
          register: sudoers
          tags:
            - CCE-82279-1
            - NIST-800-53-CM-6(a)
            - NIST-800-53-IA-11
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - medium_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_require_authentication

        - name: Remove lines containing NOPASSWD from sudoers files
          ansible.builtin.replace:
            regexp: '^(?!#).*[\s]+NOPASSWD[\s]*:.*$'
            replace: '# \g<1>'
            path: '{{ item.path }}'
            validate: '/usr/sbin/visudo -cf %s'
          with_items:
            - path: /etc/sudoers
            - '{{ sudoers.files }}'
          tags:
            - CCE-82279-1
            - NIST-800-53-CM-6(a)
            - NIST-800-53-IA-11
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - medium_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_require_authentication

        - name: Find /etc/sudoers.d/ files
          ansible.builtin.find:
            paths:
              - /etc/sudoers.d/
          register: sudoers
          tags:
            - CCE-82279-1
            - NIST-800-53-CM-6(a)
            - NIST-800-53-IA-11
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - medium_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_require_authentication

        - name: Require Re-Authentication When Using the sudo Command - Find /etc/sudoers.d/* 
            files containing "Defaults timestamp_timeout"
          ansible.builtin.find:
            path: /etc/sudoers.d
            patterns:
            contains: '^[\s]*Defaults\s.*\btimestamp_timeout[\s]*=.*'
          register: sudoers_d_defaults_timestamp_timeout
          when: '"sudo" in ansible_facts.packages'
          tags:
            - CCE-87838-9
            - DISA-STIG-RHEL-08-010384
            - NIST-800-53-IA-11
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - medium_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_require_reauthentication

        - name: Require Re-Authentication When Using the sudo Command - Remove "Defaults timestamp_timeout"
            from /etc/sudoers.d/* files
          ansible.builtin.lineinfile:
            path: '{{ item.path }}'
            regexp: '^[\s]*Defaults\s.*\btimestamp_timeout[\s]*=.*'
            state: absent
          with_items: '{{ sudoers_d_defaults_timestamp_timeout.files }}'
          when: '"sudo" in ansible_facts.packages'
          tags:
            - CCE-87838-9
            - DISA-STIG-RHEL-08-010384
            - NIST-800-53-IA-11
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - medium_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_require_reauthentication

        - name: Require Re-Authentication When Using the sudo Command - Ensure timestamp_timeout
            has the appropriate value in /etc/sudoers
          ansible.builtin.lineinfile:
            path: /etc/sudoers
            regexp: '^[\s]*Defaults\s(.*)\btimestamp_timeout[\s]*=[\s]*[-]?\w+\b(.*)$'
            line: Defaults \1timestamp_timeout={{ var_sudo_timestamp_timeout }}\2
            validate: /usr/sbin/visudo -cf %s
            backrefs: true
          register: edit_sudoers_timestamp_timeout_option
          tags:
            - CCE-87838-9
            - DISA-STIG-RHEL-08-010384
            - NIST-800-53-IA-11
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - medium_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_require_reauthentication

        - name: Require Re-Authentication When Using the sudo Command - Enable 
            option with correct value in /etc/sudoers
          ansible.builtin.lineinfile:
            path: /etc/sudoers
            line: Defaults timestamp_timeout={{ var_sudo_timestamp_timeout }}
            validate: /usr/sbin/visudo -cf %s
          when: >
            edit_sudoers_timestamp_timeout_option is defined and
            not edit_sudoers_timestamp_timeout_option.changed
          tags:
            - CCE-87838-9
            - DISA-STIG-RHEL-08-010384
            - NIST-800-53-IA-11
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - medium_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_require_reauthentication

        - name: Require Re-Authentication When Using the sudo Command - Remove timestamp_timeout
            wrong values in /etc/sudoers
          ansible.builtin.lineinfile:
            path: /etc/sudoers
            regexp: '^[\s]*Defaults\s+(.*)\btimestamp_timeout[\s]*=[\s]*([^{{ var_sudo_timestamp_timeout }}b]|-)?\w+\b(.*)$'
            state: absent
            validate: /usr/sbin/visudo -cf %s
          tags:
            - CCE-87838-9
            - DISA-STIG-RHEL-08-010384
            - NIST-800-53-IA-11
            - PCI-DSSv4-2.2.6
            - low_complexity
            - low_disruption
            - medium_severity
            - no_reboot_needed
            - restrict_strategy
            - sudo_require_reauthentication

        # NEW: Task to restrict access for service accounts
        - name: Restrict access to service accounts by disabling interactive shell
          user:
            name: "{{ item }}"
            shell: /sbin/nologin
          loop: "{{ service_accounts }}"
          tags:
            - restrict_service_accounts

      # Condition to run the entire block:
      when: >
        "sudo" in ansible_facts.packages and
        "ipa_configured == true and ssh_keys_used_recently == false"

    ################################################################
    # 6) If one or more conditions failed, display message and stop
    ################################################################
    - name: "Show which condition(s) failed"
      debug:
        msg:
          - "One or more conditions not met. Exiting..."
          - "ipa_configured = {{ ipa_configured }}"
          - "ssh_keys_used_recently = {{ ssh_keys_used_recently }}"
      when: not (ipa_configured and ssh_keys_used_recently)
      changed_when: false
      failed_when: false